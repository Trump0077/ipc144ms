*****************************************************************************
                        Assignment 1 - Milestone 3
Full Name  :Jiaheng Wang
Student ID#:180562217
Email      :jwang522@myseneca.ca
Section    :NNN

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
*****************************************************************************
1.  The first additional function I created is "swap" function. This function can help me to swap the appointment time if they are not in the right order. The prototype of the function is "void swap(struct Appointment *x, struct Appointment *y)". I will change the location of the first parameter with the second parameter by a temporary parameter.
The second additional function I created is "bubbleSort" function. This function can help to put all appointments data in the time order. It can help us organize the appointment file. The prototype of the function is "void bubbleSort(struct Appointment arr[], int n)". I used two for loop. The first for loop ensures the most recent appointment on the top of the file by using "swap" function. The second for loop ensures every appointment data is in the correct position. We need to compare each appointment first. If one is newer than the other one, I will swap them.
The third additional function I created is "leapYear" function. This function can change the February date range to 29 when it is a leap year. The prototype of the function is "int leapYear(int y)". I used a flag to determine if it is a leap year or not. If the year we input can be divided by 100 and also can be divided by 400, it is a leap year, and we return 1 (True). And if the year we input cannot be divided by 100 but it can be divided by 4, it is a leap year, and we return 1 (True). The else years are not leap years, we return 0.

2. Around 150 lines of code I used for "addAppointment" function. At least 100 lines of code I saved by applying pattern recognition and use of functions. In this function, we should input lots of data, such as patients number, appointment years, month, day, hour, minute. For each data input, we need to validate the number is a positive integer. In addition, we need to set a range of each year, month, day, hour, minute. Therefore, I used "inputIntPositive" function and "inputIntRange" function for every input. Besides, I used "findPatientIndexByPatientNum" function and "leapYear" function. These functions help save many lines of code and help with readability and maintainability of the code. Pattern recognition can solve categorization problems. The programmer can read the code in same function quickly and easily. If we write a same codes many times instead of using functions, we will get more workload than before. If unfortunately one piece of codes has bugs, we need to look for where the bugs are and read codes line by line. However, if we use functions, we can only modify the function we defined to upgrade and maintain our program easily. It is also easy to read for other programmers.

3. In the first week, we develop some general code for the milestone, and it laid a good foundation for part 2 and part 3. When we write codes for the part 2 and part 3, we would use lots of functions we create in part 1. In the second week, we develop a program for the patient, including patient information file view, search, edit, add, and remove. And in the last week, we develop a program for the appointment system. When we develop a big program, we can break it down into some small parts and accomplish them one by one. When we finish one part of a big program, we will feel a sense of achievement and have the motivation to do the next part. If we do the whole program at once, we may not know how to deal with it and give up quickly. In the milestone, I met many challenges, such as "inputCharOption" in part 1, "editPatient" in part 2, and ranking the appointment time order in part 3. To deal with them, I spent lots of time searching, learning, and thinking. If you want to learn programming well, you must work hard every day because there will be lots of new techniques updates every day.

